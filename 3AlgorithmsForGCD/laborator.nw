---
format: markdown
title: 'Laboratory 1'
author: Tiutiu Natan-Gabriel
---

\newcommand{\mr}[1]{\mathrm{#1}}
\newcommand{\mb}[1]{\mathbf{#1}}
\newcommand{\mm}[1]{\mathbb{#1}}
\newcommand{\mc}[1]{\mathcal{#1}}
\newcommand{\mf}[1]{\mathfrak{#1}}
\newcommand{\mt}[1]{\mathtt{#1}}
\newcommand{\Om}{\Omega}
\newcommand{\om}{\omega}
\newcommand{\dagg}{\dagger}
\newcommand{\tuple}[1]{\langle #1 \rangle}
\newcommand{\bash}[1]{\backslash{#1}}
\newcommand{\ti}[1]{\textit{#1}}
\newcommand{\tb}[1]{\textbf{#1}}
\newcommand{\ts}[1]{\textsc{#1}}
\newcommand{\tu}[1]{\underline{#1}}
\newcommand{\ty}[1]{\texttt{#1}}
\newcommand{\pp}[2]{\Pr\left[{#1}\,\mid\,{#2}\right]}
\newcommand{\mood}[1]{\,(\mathrm{modulo}\,\,{#1})}
\newcommand{\modd}{\,\mathrm{mod}\,}
\newcommand{\Ke}[1]{\mathrm{Kern}\left[{#1}\right]}
\newcommand{\im}{\mathrm{im}\,}
\newcommand{\dset}[2]{\left\{{#1}\, | \,{#2} \right\}}
\newcommand{\sset}[1]{\left\{{#1}\right\}}
\newcommand{\sgn}{\mr{sgn}}
\newcommand{\barr}[1]{\overline{#1}}
\newcommand{\diag}{\mathrm{diag}}
\newcommand{\kp}[1]{\langle #1 \rangle}
\newcommand{\braket}[2]{\langle{#1}\,|\,{#2}\rangle}
\newcommand{\ms}[1]{\underline{#1}}
\newcommand{\teilt}{\,\vDash\,}
\newcommand{\steilt}{\,\vdash\,}
\newcommand{\nteilt}{\,\nvDash\,}
\newcommand{\nsteilt}{\,\nvdash\,}
\newcommand{\ord}[1]{\mr{ord}\left({#1}\right)}
\newcommand{\lcm}[1]{\mr{lcm}\left({#1}\right)}
\newcommand{\D}{\downarrow}
\newcommand{\eps}{\varepsilon}
\newcommand{\vphi}{\varphi}
\newcommand{\vtheta}{\vartheta}
\newcommand{\sql}{\,\sqsubseteq\,}
\newcommand{\deff}{\stackrel{\text{ def }}{=}}
\newcommand{\Hom}{\mathrm{Hom}}
\newcommand{\End}{\mathrm{End}}
\newcommand{\Aut}{\mathrm{Aut}}
\newcommand{\QED}{\phantom{mmm}\blacksquare}
\newcommand{\cycle}[2]{\left[\begin{matrix}{#1}\\{#2}\end{matrix}\right]}
\newcommand{\parti}[2]{\left\{\begin{matrix}{#1}\\{#2}\end{matrix}\right\}}
\newcommand{\eev}{\wedge}


~~~~~{.python}
<<hello.hs>>=
<<printMessage>>
@
~~~~~

~~~~~{.python}
<<message>>=
"HelloWorld!"
@
~~~~~

~~~~~{.python}
<<printMessage>>=
print(<<message>>)
@
~~~~~


# Euclidean algorithm {#euclidean}

Algorithm description:

As long as b,which is the second elemnt is not equal to 0,we call
recursively euclidean(b,a%b).

We can observe that always second
element becomes the first element in the new recursive call.If we would not
inverse the position of the elements,we would get stuck.
Ex.:a =1000,b=100 euclidean(1000,100)= euclidean(1000,100)= ...= euclidean(1000,100)= ....

The mathematical model for our function:

$$
 euclidean(a,b)= \begin{cases} euclidean(b,a\%b), if b>0 \\ a,else  \end{cases}
$$




The proof of corectness is based on the following lemma:

*If a=c(mod b) (1), then (a,b)=(c,b)  (3) *

Proof of this lemma:

From (1) we have b|a-c,so there is a y such that by=a-c.If there is
a d such that d divides a and b ,then it will also divide c=a-by.
=>any divisor of a and b is a divisor of c and b. (2)
Suppose (a,b)=x and (c,b)=y.Using (2) we have that x|y and y|x ,so we
have that (a,b)=(c,b).

If we put a=a%b(mod b) =>using lemma (3)  we have that (a,b)=(a%b ,b)

~~~~~{.python}
<<euclidean>>=
euclidean a b =
    if (b>0)
        then (euclidean b (mod a b) )
        else a
@
~~~~~
