---
format: markdown
title: 'Laboratory 4'
author: Tiutiu Natan-Gabriel,937
---

\newcommand{\mr}[1]{\mathrm{#1}}
\newcommand{\mb}[1]{\mathbf{#1}}
\newcommand{\mm}[1]{\mathbb{#1}}
\newcommand{\mc}[1]{\mathcal{#1}}
\newcommand{\mf}[1]{\mathfrak{#1}}
\newcommand{\mt}[1]{\mathtt{#1}}
\newcommand{\Om}{\Omega}
\newcommand{\om}{\omega}
\newcommand{\dagg}{\dagger}
\newcommand{\tuple}[1]{\langle #1 \rangle}
\newcommand{\bash}[1]{\backslash{#1}}
\newcommand{\ti}[1]{\textit{#1}}
\newcommand{\tb}[1]{\textbf{#1}}
\newcommand{\ts}[1]{\textsc{#1}}
\newcommand{\tu}[1]{\underline{#1}}
\newcommand{\ty}[1]{\texttt{#1}}
\newcommand{\pp}[2]{\Pr\left[{#1}\,\mid\,{#2}\right]}
\newcommand{\mood}[1]{\,(\mathrm{modulo}\,\,{#1})}
\newcommand{\modd}{\,\mathrm{mod}\,}
\newcommand{\Ke}[1]{\mathrm{Kern}\left[{#1}\right]}
\newcommand{\im}{\mathrm{im}\,}
\newcommand{\dset}[2]{\left\{{#1}\, | \,{#2} \right\}}
\newcommand{\sset}[1]{\left\{{#1}\right\}}
\newcommand{\sgn}{\mr{sgn}}
\newcommand{\barr}[1]{\overline{#1}}
\newcommand{\diag}{\mathrm{diag}}
\newcommand{\kp}[1]{\langle #1 \rangle}
\newcommand{\braket}[2]{\langle{#1}\,|\,{#2}\rangle}
\newcommand{\ms}[1]{\underline{#1}}
\newcommand{\teilt}{\,\vDash\,}
\newcommand{\steilt}{\,\vdash\,}
\newcommand{\nteilt}{\,\nvDash\,}
\newcommand{\nsteilt}{\,\nvdash\,}
\newcommand{\ord}[1]{\mr{ord}\left({#1}\right)}
\newcommand{\lcm}[1]{\mr{lcm}\left({#1}\right)}
\newcommand{\D}{\downarrow}
\newcommand{\eps}{\varepsilon}
\newcommand{\vphi}{\varphi}
\newcommand{\vtheta}{\vartheta}
\newcommand{\sql}{\,\sqsubseteq\,}
\newcommand{\deff}{\stackrel{\text{ def }}{=}}
\newcommand{\Hom}{\mathrm{Hom}}
\newcommand{\End}{\mathrm{End}}
\newcommand{\Aut}{\mathrm{Aut}}
\newcommand{\QED}{\phantom{mmm}\blacksquare}
\newcommand{\cycle}[2]{\left[\begin{matrix}{#1}\\{#2}\end{matrix}\right]}
\newcommand{\parti}[2]{\left\{\begin{matrix}{#1}\\{#2}\end{matrix}\right\}}
\newcommand{\eev}{\wedge}




# Introduction {#introduction}

I will implement an algorithm (RSA) which will perform encryption for a plaintext and decryption for a ciphertext, based 
on some pre-generated keys.
I also defined some functions for computing  binary representaion(as a list) of a decimal number,
for performing repeated squaring modular exponentiation algorithm (we will use rsme as a shortcut),
for computing gcd using euclidean algorithm,for computing the modular inverse, using extended euclidean algorithm
and for testing whether a number is prime (basic version - we just test whether the number is a multiple of the first
prime numbers and the better one - in which we use miller rabin test)

In order to generate the documentation written using markdown format , run **pandoc -t latex -o main.pdf main.nw** .

In order to generate the source code file, run **notangle main.nw>main.py** .

Once you have the source code file,start the interpreter using command **ghci** ,then load the file using **:l main.hs** and 
finally run **pollard YOUR_NUMBER YOUR_BOUND** , for example **pollard 1725 7** in order to find 
a non-trivial divisor of 1725. You can also run **pollardWithIterations YOUR_NUMBER YOUR_BOUND ITERATIONS_NUMBER**, if you want to see whether 
the algorithm finds a non-trivial divisor in maximum ITERATIONS_NUMBER iterations.For example you can run **pollardWithIterations (2\^31-1) 19 10** . I recommand you
to use this function just for testing that in case of prime numbers our algorithm does not find any non-trivial divisor in any number of steps.

In the case you want to be asked whether you want to use the default bound or not, please take a look at functions **pollard_wrapper** and **pollard_with_iterations_wrapper**.

# Repeated Squaring Modular Exponentiation & helper functions

Function generate_binary_number transforms a decimal number into a binary number.
This is the algorithm:

Input: natural number n

Output: binary representaion of n (as a list)

if n = 0 then return [0]

l=[]

while n>0 do:

\quad l=l $\bigcup$ (n modulo 2)

\quad n = n / 2 (we take the integer part of the result)

~~~~~{.python}
<<generate_binary_number>>=
def generate_binary_number(n):
    if n == 0:
        return [0]
    l = []
    while n > 0:
        l.append(n % 2)
        n = n // 2
    return l
@
~~~~~


Let define Repeated Squaring Modular Exponentiation (rsme) function:

Input: b, k, n in N with b < n and k = $\sum_{i=0}^{t} k_i*2^{i}$

Output: a = $b^{k}$ mod n.


a=1

if k=0 then write(a)

c=b

if $k_0$ =1 then a=b

for i=1 to t do

\quad c= $c^{2}$ mod n

\quad if $k_i$ =1 then a=c*a mod n

write(a)


**Proof of corectness for Repeated Squaring Modular Exponentiation:**

We have k = $\sum_{i=0}^{t} k_i*2^{i}$

if k=0 => we return 1 because any integer to the power 0 is 1.

At each step we have $b^{2^{i}}$ mod n,starting from i=1(from right in binary representation).
Using $b^{2^{i}}$ mod n, we compute $b^{2^{i+1}}$ mod n = $(b^{2^{i}})^{2}$ mod n = $(b^{2^{i}} mod\ n)^{2}$.
If the ${k_i}$ is 1 then we compute :  ( new a= new c* old a mod n ).This holds because
 $b^{\sum_{i=0}^{t} k_i*2^{i}}$ = $b^{ k_0*2^{0}}$ * $b^{ k_1*2^{1}}$ * ...* $b^{ k_t*2^{t}}$ and then 
 $b^{k}$ mod n = $b^{\sum_{i=0}^{t} k_i*2^{i}}$ mod n = ($b^{ k_0*2^{0}}$ mod n) * ($b^{ k_1*2^{1}}$ mod n) * ...* ($b^{ k_t*2^{t}}$ mod n) ,
where ($b^{ k_i*2^{i}}$ mod n) is our c computed at i-th iteration(for $k_i$=1).



~~~~~{.python}
<<rsme>>=
def rsme(b, k, n):
    a = 1
    if (k == 0):
        return a
    c = b
    l = generate_binary_number(k)
    if l[0] == 1:
        a = b
    for i in range(1, len(l)):
        c = c * c % n
        if l[i] == 1:
            a = c * a % n
    return a
@
~~~~~

# Euclidean algorithm

Description:

As long as b,which is the second element is not equal to 0,we will call
recursively euclidean(b,a%b) .We can observe that always second
element becomes the first element in the new recursive call.If we would not
inverse the position of the elements,we would get stuck(in some cases).

Ex.:a =1000,b=100 euclidean(1000,100)= euclidean(1000,100)= ...= euclidean(1000,100)= ....

Here is the mathematical model:

$$
 euclidean(a,b)= \begin{cases} euclidean(b,a\%b), if b>0 \\ a,else  \end{cases}
$$

The proof of corectness is based on the following lemma:

*If a=c(mod b) (1), then (a,b)=(c,b)  (3)*


Proof of this lemma:

From (1) we have b|a-c,so there is a y such that by=a-c.If there is
a d such that d divides a and b ,then it will also divide c=a-by.
=>any divisor of a and b is a divisor of c and b. (2)
Suppose (a,b)=x and (c,b)=y.Using (2) we have that x|y and y|x ,so we
have that (a,b)=(c,b).

For our problem we use this:

We have a=a%b(mod b) =>using lemma (3)  we have that (a,b)=(a%b,b)


~~~~~{.python}
<<euclidean>>=
def euclidean(a, b):
    if b>0:
        return euclidean(b, a % b)
    return a
@
~~~~~

# Extended euclidean algorithm

Description:

We can observe that the array defined as follows respects the definition of r (the variable r used in extended_euclidean function) : 

$r_{0}$= a

$r_{1}$= b

$r_{2}$= $r_{0}$  % $r_{1}$ (1)

.........

$r_{i}$= $r_{i-2}$ % $r_{i-1}$ 

Let $q_{i}$ be the quotient of $r_{i-2}$ / $r_{i-1}$  $\implies$ 
$r_{i-2}$ = $q_{i}$ * $r_{i-1}$ + $r_{i}$

Hence, we have that:

$r_{i}$= $r_{i-2}$ - $q_{i}$ * $r_{i-1}$ (\*)


We will prove by induction that : P(k): $r_{k}$= $s_{k}$ * a + $t_{k}$ * b , where 
$s_{k}$= $s_{k-2}$ - $q_{k}$ * $s_{k-1}$ and $t_{k}$= $t_{k-2}$ - $q_{k}$ * $t_{k-1}$ , is true $\forall b \ge$ 2 , 
where $s_{0}$= 1, $s_{1}$= 0 and $t_{0}$= 0, $t_{1}$= 1

P(2):

$s_{2}$= $s_{0}$ - $q_{2}$ * $s_{1}$ = 1 - 0 = 1



$t_{2}$= $t_{0}$ - $q_{2}$ * $t_{1}$ = 0 - $q_{2}$ = - a/b


$r_{2}$ = a % b (using (1))     (2)

$s_{2}$ * a + $t_{2}$ * b = 1 * a - (a/b) * b = a - q*b = a % b  (3)

Using (2) and (3) => P(2) is true

P(k) $\implies$ P(k+1)

P(k+1): $r_{k+1}$= $s_{k+1}$ * a + $t_{k+1}$ * b , where 
$s_{k+1}$= $s_{k-1}$ - $q_{k+1}$ * $s_{k}$ and $t_{k+1}$= $t_{k-1}$ - $q_{k+1}$ * $t_{k}$

So, we have $r_{k+1}$ = $s_{k+1}$ * a + $t_{k+1}$ * b = 
($s_{k-1}$ - $q_{k+1}$ * $s_{k}$) * a + ($t_{k-1}$ - $q_{k+1}$ * $t_{k}$) * b = 
$s_{k-1}$ * a - $q_{k+1}$ * $s_{k}$ * a + $t_{k-1}$ * b - $q_{k+1}$ * $t_{k}$ * b = 
($s_{k-1}$ * a + $t_{k-1}$ * b) - $q_{k+1}$ * ($s_{k}$ * a + $t_{k}$ * b) = 
$r_{k - 1}$ - $q_{k+1}$ * $r_{k}$ (so we reached the definition of $r_{k+1}$, as you can see in (\*) ) $\implies$  P(k+1) is true

So,we have $r_{k}$= $s_{k}$ * a + $t_{k}$ * b , where 
$s_{k}$= $s_{k-2}$ - $q_{k}$ * $s_{k-1}$ and $t_{k}$= $t_{k-2}$ - $q_{k}$ * $t_{k-1}$ , $\forall b \ge$ 2 .

Once $r_{k}$ becomes 0, the algorithm will stop. Then we will say that 
gcd(a,b)= $r_{k}$ and gcd(a,b)= $s_{k}$ * a + $t_{k}$ * b .

In our program we just keep the last 2 values, not the entire arrays.
We denoted u=s and v=t.
  




This is the algorithm:

Input: a, b $\in$  $\mathbf{N}$ , a,b $\le$ n, a $\ge$ b.

Output: d=gcd(a,b) and u,v $\in$ $\mathbf{Z}$ such that au + bv = d.

Algorithm:

u2=1; u1=0; v2=0; v1=1;

while b>0 do:

\quad q= [a / b]; r= a - q*b; u= u2 - q*u1; v= v2 - q*v1;

\quad a= b; b= r; u2= u1; u1= u; v2= v1; v1= v;

d= a; u= u2; v= v2;

write(d, u, v)



~~~~~{.python}
<<extended_euclidean>>=
def extended_euclidean(a, b):
    u2 = 1
    u1 = 0
    v2 = 0
    v1 = 1
    while b > 0:
        q = a // b
        r = a - q * b
        u = u2 - q * u1
        v = v2 - q * v1

        a = b
        b = r
        u2 = u1
        u1 = u
        v2 = v1
        v1 = v
    d = a
    u = u2
    v = v2
    return d, u, v
@
~~~~~

# Miller-Rabin test


~~~~~{.python}
<<miller_rabin_test_wrapper>>=
def miller_rabin_test_wrapper(n, k):
    t = n - 1
    s = 0
    while t % 2 == 0:
        t = t // 2
        s += 1
    # print("aici",s,t)
    while k > 0:
        result = miller_rabin_test(n, s, t)
        k -= 1
        if not result:
            return False  # the result is composite
    return True  # the result may be prime
@
~~~~~


~~~~~{.python}
<<miller_rabin_test>>=
def miller_rabin_test(n, s, t):
    a = secrets.randbelow(n - 2) + 2
    # now let's compute the sequence
    sequence = []
    a_t = rsme(a, t, n)
    sequence.append(a_t)
    for i in range(1, s + 1):
        a_t = a_t * a_t % n
        sequence.append(a_t)

    if sequence[0] == 1:
        return True
    # print("sequence: ",sequence)
    for i in range(1, len(sequence)):
        if sequence[i] == 1:
            if sequence[i - 1] == n - 1:
                return True
            else:
                return False
    return False
@
~~~~~




~~~~~{.python}
<<trivial_primality_check>>=
def trivial_primality_check(number):
    for i in [2, 3, 5, 7, 11, 13, 17, 19]:
        if number % i == 0:
            return False
    return True
@
~~~~~




~~~~~{.python}
<<generate_large_prime_wrapper>>=
# generate_large_prime function will generate a random prime number between 2^order+1 and 2^(order+1)-1
# order represents the number of bits of the number
# secrets.randbelow(2**order - 1) generates a number from interval [0,2**order - 1) =>
# secrets.randbelow(2**order - 1) + 2**order + 1 generates a number from interval [2**order + 1,2**order + 2**order) =>
# a number from interval [2**order + 1,2**(order+1) -1]
def generate_large_prime_wrapper(order):
    number = 2 ** order
    return generate_large_prime(number)
@
~~~~~


~~~~~{.python}
<<generate_large_prime>>=
def generate_large_prime(number):
    random_number = secrets.randbelow(number - 1) + number + 1
    if not trivial_primality_check(random_number):
        return generate_large_prime(number)
    if not miller_rabin_test_wrapper(random_number, 50):
        return generate_large_prime(number)
    # print("not trivial_primality_check(random_number): ",random_number,not trivial_primality_check(random_number))
    return random_number
@
~~~~~

~~~~~{.python}
<<generate_key>>=
def generate_key(order):
    p = generate_large_prime_wrapper(order)
    print("p: ", p)
    q = generate_large_prime_wrapper(order)
    print("q: ", q)
    while p == q:
        q = generate_large_prime_wrapper(6)
        print("q: ", q)
    n = p * q
    phi_n = (p - 1) * (q - 1)
    # secrets.randbelow(phi_n-2) generates a random in range [0,phi_n-2),then
    # secrets.randbelow(phi_n-2) + 2 generates a random in range [2,phi_n) ,that is(1,phi_n)
    e = secrets.randbelow(phi_n - 2) + 2
    while euclidean(e, phi_n) != 1:
        e = secrets.randbelow(phi_n - 2) + 2
    _, d, _ = extended_euclidean(e, phi_n)
    d = (d + phi_n) % phi_n
    # (n,e) is public key and d is private
    print(n, e, d, p, q)
    return n, e, d
@
~~~~~



~~~~~{.python}
<<alphabet>>=

numbers = {0: " ", 1: "a", 2: "b", 3: "c", 4: "d", 5: "e", 6: "f", 7: "g", 8: "h", 9: "i", 10: "j", 11: "k", 12: "l",
           13: "m", 14: "n", 15: "o", 16: "p", 17: "q", 18: "r", 19: "s", 20: "t", 21: "u", 22: "v", 23: "w", 24: "x",
           25: "y", 26: "z"}
alphabet = {" ": 0, "a": 1, "b": 2, "c": 3, "d": 4, "e": 5, "f": 6, "g": 7, "h": 8, "i": 9, "j": 10, "k": 11, "l": 12,
            "m": 13, "n": 14, "o": 15, "p": 16, "q": 17, "r": 18, "s": 19, "t": 20, "u": 21, "v": 22, "w": 23, "x": 24,
            "y": 25, "z": 26}
@
~~~~~


~~~~~{.python}
<<compute_numerical_equivalent>>=
def compute_numerical_equivalent(text):
    numerical_equivalent = 0
    for i in text:
        numerical_equivalent = numerical_equivalent * 27 + alphabet[i]
    return numerical_equivalent
@
~~~~~


~~~~~{.python}
<<compute_literal_equivalent>>=
def compute_literal_equivalent(number, iterations):
    literal_equivalent = ""
    while iterations > 0:
        literal_equivalent = numbers[number % 27] + literal_equivalent
        number = number // 27
        iterations -= 1
    return literal_equivalent
@
~~~~~




~~~~~{.python}
<<encrypt>>=
# Plaintext message units are blocks of k letters, whereas
# ciphertext message units are blocks of l letters. The plaintext
# is completed with blanks, when necessary.
def encrypt(plaintext, n, e, k, l):
    if 27 ** k >= n or n >= 27 ** l:
        return "Please choose some appropriate values for k and l"

    ciphertext = ""
    while len(plaintext) % k != 0:
        plaintext += numbers[0]
    # Write the numerical equivalents
    for i in range(0, len(plaintext) // k):
        numerical_equivalent = compute_numerical_equivalent(
            plaintext[k * i:k * (i + 1)])  # alphabet[plaintext[2 * i]]*27+alphabet[plaintext[2 * i + 1]]
        # print("numerical_equivalent: ",numerical_equivalent)
        encrypted_number = rsme(numerical_equivalent, e, n)
        # print("encrypted_number: ", encrypted_number)
        literal_equivalent = compute_literal_equivalent(encrypted_number, l)
        ciphertext = ciphertext + literal_equivalent

    return ciphertext
@
~~~~~


~~~~~{.python}
<<decrypt>>=
# In the decrypt function we won't have any case in which we have to complete the ciphertext with blanks,
# because the encrypt function always return a ciphertext of length multiple of "l"
def decrypt(ciphertext, n, d, k, l):
    # we MUST have 27^k < n < 27^l
    if 27 ** k >= n or n >= 27 ** l:
        return "Please choose some appropriate values for k and l"

    # print("ciphertext: ",ciphertext)
    plaintext = ""
    for i in range(0, len(ciphertext) // l):
        numerical_equivalent = compute_numerical_equivalent(ciphertext[l * i:l * (
                    i + 1)])  # alphabet[ciphertext[3 * i]] * (27**2) + alphabet[ciphertext[3 * i + 1]] * 27 + alphabet[ciphertext[3 * i + 2]]
        # print("numerical_equivalent: ",numerical_equivalent)
        decrypted_number = rsme(numerical_equivalent, d, n)
        # print("decrypted_number: ",decrypted_number)
        literal_equivalent = compute_literal_equivalent(decrypted_number, k)
        plaintext = plaintext + literal_equivalent

    for i in range(len(plaintext) - 1, -1, -1):
        if plaintext[i] == numbers[0]:
            plaintext = plaintext[:-1]
        else:
            break

    return plaintext
@
~~~~~


~~~~~{.python}
<<RSA>>=
def RSA(message, order=1024, k=-1, l=-1):
    n, e, d = generate_key(order)
    lower_bound = 0.21030991785714
    upper_bound = 0.21030991785716
    if k == -1 or l == -1:
        k = int(2 * order * lower_bound)
        l = int(2 * (order + 1) * upper_bound) + 1
    # print(n,e,d)
    print("Message to be encrypted: ", message)
    encrypted_message = encrypt(message, n, e, k, l)
    print("encrypted_message: ", encrypted_message)
    decrypted_message = decrypt(encrypted_message, n, d, k, l)
    print("decrypted_message: ", decrypted_message)
@
~~~~~


~~~~~{.python}
<<RSA_using_file>>=
def RSA_using_file(file_name, order=512, k=-1, l=-1):
    n, e, d = generate_key(order)
    lower_bound = 0.21030991785714
    upper_bound = 0.21030991785716
    if k == -1 or l == -1:
        k = int(2 * order * lower_bound)
        l = int(2 * (order + 1) * upper_bound) + 1
    # print(n,e,d)

    f = open(file_name, "r")
    message = f.read()
    f.close()

    print("Message to be encrypted: ", message)


    encrypted_message = encrypt(message, n, e, k, l)
    encrypted_file = file_name+".encrypted"
    # print(encrypted_file)
    f = open(encrypted_file, "w")
    f.write(encrypted_message)
    f.close()
    print("encrypted_message: ", encrypted_message)



    decrypted_message = decrypt(encrypted_message, n, d, k, l)
    decrypted_file = file_name + ".decrypted"
    f = open(decrypted_file, "w")
    f.write(decrypted_message)
    f.close()
    print("decrypted_message: ", decrypted_message)
@
~~~~~

~~~~~{.python}
<<main>>=
def main():
    message = "algebra"
    print("Message to be encrypted: ", message)
    encrypted_message = encrypt("algebra", 1643, 67, 2, 3)
    print("encrypted_message: ", encrypted_message)
    decrypted_message = decrypt(encrypted_message, 1643, 163, 2, 3)
    print("decrypted_message: ", decrypted_message)
@
~~~~~

~~~~~{.python}
<<tests>>=
def tests():
    assert miller_rabin_test_wrapper(101, 50)
    assert not miller_rabin_test_wrapper(123, 50)

    # testing miller_rabin_test_wrapper function (with 50 iterations)
    for i in [17, 19,31,61,89,107]:
        assert miller_rabin_test_wrapper(2**i - 1,50)
    for i in [21,29,49,80,99,123]:
        assert not miller_rabin_test_wrapper(2**i - 1, 50)

    # testing the extended_euclidean and euclidean functions
    for i in range(0, 20):
        a = random.randrange(10, 1000)
        b = random.randrange(10, 1000)
        l = extended_euclidean(a, b)
        assert a * l[1] + b * l[2] == euclidean(a, b)

    # testing the rsme function, which computes a^b mod n using repeated squaring modular exponentiation
    assert (rsme(16, 10, 11) == pow(16, 10, 11)
    assert (rsme(116, 107, 211) == pow(116, 107, 211)
    assert (rsme(145, 129, 199) == pow(145, 129, 199)
    for i in range(0, 20):
        a = random.randrange(10, 1000)
        b = random.randrange(10, 1000)
        n = random.randrange(10, 1000)
        assert rsme(a, b, n) == pow(a, b, n)

    # testing the encrypt and decrypt functions

    for i in range(0, 20):
        # 27^ k >= n or n >= 27^ l
        message_length = random.randrange(10, 1000)
        characters = list(alphabet.keys())
        message = ''.join([random.choice(characters) for n in range(message_length)])
        # remove trailing spaces
        for i in range(len(message) - 1, -1, -1):
            if message[i] == numbers[0]:
                message = message[:-1]
            else:
                break
        order = 128
        n, e, d = generate_key(order)
        #lower bound is a little bit SMALLER than log 27 2
        # 27 ** k <= n and n <= 27 ** l
        # =>k * log 2 27 <= log 2 n and n <= 27 ** l and as we choose
        # n in interval 2^(order)+1,2^(order+1)-1 => k * log 2 27 <= log 2 n <= order   =>
        # it's safe to take k = (log 2 27)^(-1) * log 2 n = log 27 2 * log 2 n
        lower_bound = 0.21030991785714
        # lower bound is a little bit LARGER than log 27 2
        upper_bound = 0.21030991785716

        k = random.randrange(1, int(2 * order * lower_bound)+1)
        # aux is lower bound for l
        aux = int(2 * (order + 1) * upper_bound) + 1
        l = random.randrange(aux, aux*4)

        # print("Message to be encrypted: ", message)
        encrypted_message = encrypt(message, n, e, k, l)
        # print("encrypted_message: ", encrypted_message)
        decrypted_message = decrypt(encrypted_message, n, d, k, l)
        print("message: ",message)
        print("decrypted_message: ", decrypted_message)
        assert message == decrypted_message
@
~~~~~



~~~~~{.python}
<<*>>=
import secrets
import sys
import random

print("sys.getrecursionlimit(): ",sys.getrecursionlimit())
sys.setrecursionlimit(2000)


<<generate_binary_number>>
<<rsme>>

<<euclidean>>
<<extended_euclidean>>


<<miller_rabin_test_wrapper>>
<<miller_rabin_test>>
<<trivial_primality_check>>
<<generate_large_prime_wrapper>>
<<generate_large_prime>>
<<generate_key>>

<<alphabet>>
<<compute_numerical_equivalent>>
<<compute_literal_equivalent>>
<<encrypt>>
<<decrypt>>
<<RSA>>
<<RSA_using_file>>

<<main>>
<<tests>>

# RSA("the best time to visit cancun is from december to april during the peak season")

# RSA_using_file("message.txt")

tests()

# main()

@
~~~~~